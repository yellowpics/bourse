import os
import json
import requests
from flask import Flask, request, render_template_string, redirect, url_for
from datetime import datetime

# ====== üîë CONFIGURATION PERPLEXITY ======
PERPLEXITY_API_KEY = "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"
API_URL = "https://api.perplexity.ai/chat/completions"

# ====== üìÇ STOCKAGE PERSISTANT ======
PERSISTENT_DIR = "./data"
HISTORY_FILE = os.path.join(PERSISTENT_DIR, "history.json")

# üî• Cr√©ation du dossier "./data" si inexistant (Autoris√© sur Render)
if not os.path.exists(PERSISTENT_DIR):
    os.makedirs(PERSISTENT_DIR, exist_ok=True)

# ====== üåê APPLICATION FLASK ======
app = Flask(__name__)

# ====== üß† FONCTIONS DE GESTION DE L'HISTORIQUE ======
def save_to_history(sentiment):
    """Ajoute un nouveau r√©sultat au d√©but de l'historique et le sauvegarde."""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    new_entry = {"date": timestamp, "sentiment": sentiment}

    history = load_history()
    history.insert(0, new_entry)  # üî• Ajoute en haut

    with open(HISTORY_FILE, "w") as file:
        json.dump(history, file, indent=4)

def load_history():
    """Charge l'historique depuis le fichier persist√©."""
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r") as file:
            return json.load(file)
    return []

def delete_entry(index):
    """Supprime une entr√©e sp√©cifique de l'historique."""
    history = load_history()
    if 0 <= index < len(history):
        del history[index]
        with open(HISTORY_FILE, "w") as file:
            json.dump(history, file, indent=4)

# ====== üìä FONCTION POUR R√âCUP√âRER LE SENTIMENT ======
def get_market_sentiment():
    headers = {
        "Authorization": f"Bearer {PERPLEXITY_API_KEY}",
        "Content-Type": "application/json"
    }

    prompt = (
            "Agis comme un expert financier sp√©cialis√© dans l‚Äôanalyse des march√©s boursiers."
            "Ta mission est d‚Äôanalyser les tendances tr√®s r√©centes du march√© am√©ricain (S&P 500, Nasdaq, etc)"
            "et de d√©terminer la direction probable pour les 2 √† 4 prochaines semaines. Et fournir une r√©ponses extr√™mement concise en 4 mot max"
            
            "üîç Effectue des recherches sur des sites financiers reconnus et fiables, tels que :"
            
            "Bloomberg (www.bloomberg.com)"
            "CNBC - Markets (www.cnbc.com/markets)"
            "Reuters - Business & Finance (www.reuters.com/finance)"
            "Yahoo Finance (www.finance.yahoo.com)"
            "Investing.com (www.investing.com)"
            "MarketWatch (www.marketwatch.com)"
            "The Wall Street Journal - Markets (www.wsj.com/market)"
            "Seeking Alpha (www.seekingalpha.com)"
            "TradingView (www.tradingview.com)"
            
            "üìà Bas√© sur ces sources et les opinions des experts, donne une pr√©vision du march√© en r√©pondant UNIQUEMENT par un mot :"
            "UP üìà (si le march√© devrait monter)"
            "DOWN üìâ (si le march√© devrait descendre)"
            "STABLE ‚ûñ (si la tendance est neutre ou incertaine)"
            
            "Apres une analyse intelligente dit juste si le march√© est:"
            "sous √©valu√©"
            "sur√©valu√©"
            "bien √©valu√©"
            
            "Analyse le sentiment sur les crise ou les hausse √©norme, si ya un risque de crise/crash qui se pr√©pare ou de mont√©e/bullish qui se pr√©pare dans les prochains semaines / mois sinon 'RAS', tu dis 1 mot :"
            "- crash"
            "- Bullish"
            "- RAS"
            
            "Et pour finir, tu dois faire une analyse approfondie et tu me donnes une conclusion en un mot"
            "soit je vends une partie de mon portfolio car tu penses que le march√© ne risque plus trop de monter et qu'on est au sommet,"
            "soit d'acheter plus dans mon portfolio car tu penses que le march√© ne va plus descendre que √ßa,"
            "et/ou que le march√© est dans une excellente dynamique haussi√®re."
            "Choisi le meilleur ratio d'apres ton analyse d'expert Stock/liquidit√©, donne un seul choix :"
            "- 100/0"
            "- 90/10"
            "- 80/20"
            "- 70/30"
            "- 60/40"
            "- 50/50"
            "- 40/60"
            "- 30/70"
            "- 20/80"
            "- 10/90"
            "- 0/100"
            "Fournis uniquement une r√©ponses en un mot pour chaque analyse."
    )

    payload = {
        "model": "sonar",
        "messages": [
            {"role": "system", "content": "Tu es un expert financier. Concis qui donne 4 mot seulment"},
            {"role": "user", "content": prompt}
        ],
        "max_tokens": 22,
        "temperature": 0.05
    }

    try:
        response = requests.post(API_URL, headers=headers, json=payload)
        if response.status_code != 200:
            return f"Erreur API ({response.status_code})"

        result = response.json()
        sentiment = result["choices"][0]["message"]["content"].strip()
        
        # Sauvegarde le r√©sultat dans l'historique
        save_to_history(sentiment)
        
        return sentiment
    except Exception as e:
        return f"Erreur : {e}"

# ====== üåê PAGE HTML DYNAMIQUE AVEC HISTORIQUE ======
html_template = """
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Sentiment du March√©</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            padding: 50px;
            background-color: #f0f8ff;
        }
        h1 {
            font-size: 48px;
            color: #2c3e50;
        }
        .sentiment {
            font-size: 100px;
            font-weight: bold;
            color: {% if sentiment == 'UP' %}'#4CAF50'{% elif sentiment == 'DOWN' %}'#E74C3C'{% else %}'#3498DB'{% endif %};
        }
        .timestamp {
            font-size: 20px;
            color: #555;
        }
        form {
            margin-bottom: 30px;
        }
        button {
            font-size: 20px;
            padding: 10px 20px;
            color: white;
            background-color: #2c3e50;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: 0.3s;
        }
        button:hover {
            background-color: #34495e;
        }
        table {
            margin: auto;
            border-collapse: collapse;
            width: 60%;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: center;
        }
        th {
            background-color: #2c3e50;
            color: white;
        }
        .delete-btn {
            color: white;
            background-color: red;
            border: none;
            padding: 5px 10px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <h1>üìä Sentiment du March√© (S&P500 & Nasdaq)</h1>

    <form method="POST" action="/">
        <button type="submit">üìä Mettre √† jour le sentiment</button>
    </form>

    {% if sentiment %}
        <div class="sentiment">{{ sentiment }}</div>
        <div class="timestamp">Derni√®re mise √† jour : {{ timestamp }}</div>
    {% endif %}

    <h2>üìú Historique des Pr√©dictions</h2>
    <table>
        <tr>
            <th>Date</th>
            <th>Sentiment</th>
            <th>Action</th>
        </tr>
        {% for i, entry in enumerate(history) %}
        <tr>
            <td>{{ entry['date'] }}</td>
            <td>{{ entry['sentiment'] }}</td>
            <td>
                <form method="POST" action="/delete/{{ i }}">
                    <button type="submit" class="delete-btn">‚ùå</button>
                </form>
            </td>
        </tr>
        {% endfor %}
    </table>
</body>
</html>
"""

# ====== üì° ROUTES FLASK ======
@app.route('/', methods=['GET', 'POST'])
def home():
    sentiment = None
    timestamp = None

    if request.method == 'POST':
        sentiment = get_market_sentiment()
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    history = load_history()
    return render_template_string(html_template, sentiment=sentiment, timestamp=timestamp, history=history, enumerate=enumerate)

@app.route('/delete/<int:index>', methods=['POST'])
def delete(index):
    delete_entry(index)
    return redirect(url_for('home'))

# ====== üöÄ LANCEMENT SERVEUR ======
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)
